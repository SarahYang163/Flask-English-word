pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: '要部署的分支')
    }
    
    environment {
        PROJECT_DIR = "/var/lib/jenkins/jobs/flask/workspace"
        VENV_DIR = "${PROJECT_DIR}/.venv"
        REQUIREMENTS_HASH_FILE = "${PROJECT_DIR}/.requirements_hash"
        WHEELHOUSE = "${PROJECT_DIR}/wheelhouse" 
    }
    options {
        timeout(time: 10, unit: 'MINUTES') // 设置超时时间为60分钟
    }
    stages {
        stage('Clean Workspace') {
            //清理jenkins工作目录
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                script{
                    // 确保目录存在
                    sh "mkdir -p ${PROJECT_DIR}"
                    dir("${PROJECT_DIR}") {
                        if (fileExists(".git")) {
                            echo "Updating existing repository..."
                            sh "git pull origin master"
                        } else {
                            echo "Cloning repository..."
                            git url: 'git@github.com:SarahYang163/Flask-English-word.git', branch: "${params.BRANCH_NAME}"
                        }                    
                    }       
                }
            }
        }
        
        
        stage('Setup Python Environment') {
            steps {
                // Create or update the virtual environment
                script {
                    if (!fileExists("${VENV_DIR}/bin/activate")) {
                        sh "virtualenv ${VENV_DIR}"
                    }
                   sh '. ${VENV_DIR}/bin/activate'

                   // 检查 requirements.txt 是否有变化
                    def requirementsChanged = false
                    if (fileExists("${REQUIREMENTS_HASH_FILE}")) {
                        def oldHash = readFile("${REQUIREMENTS_HASH_FILE}").trim()
                        def newHash = sh(script: "md5sum ${PROJECT_DIR}/requirements.txt | awk '{ print \$1 }'", returnStdout: true).trim()
                        if (oldHash != newHash) {
                            requirementsChanged = true
                        }
                    } else {
                        requirementsChanged = true
                    }

                    if (requirementsChanged) {
                        echo "Requirements changed or first run. Installing dependencies..."
                        sh """
                            . ${VENV_DIR}/bin/activate &&
                            pip install wheel &&
                            pip wheel -r ${PROJECT_DIR}/requirements.txt -w ${WHEELHOUSE} --default-timeout=600 -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn &&
                            pip install --no-index --find-links=${WHEELHOUSE} -r ${PROJECT_DIR}/requirements.txt --default-timeout=600 &&
                            md5sum ${PROJECT_DIR}/requirements.txt | awk '{ print \$1 }' > ${REQUIREMENTS_HASH_FILE}
                        """
                    echo "Requirements changed or first run finished. Installing dependencies..."
                    }
                    else {
                        echo "Requirements not changed. Skipping installation."
                    }
                }
            }
        }
         
        stage('Run test.py') {
            steps {
                // Activate virtual environment and run tests
                echo "Run test start."
                sh """. ${VENV_DIR}/bin/activate && python3 ${PROJECT_DIR}/test.py"""
                echo "Run test end."
            }
        }

        stage('Build and Deploy') {
            steps {
                // 设置 BUILD_ID 环境变量
                echo "Build and Deploy steps start."
                sh 'pwd'
                sh 'ls -l ${PROJECT_DIR}'
                sh '''
                set -x  
                pkill -f gunicorn || true
                . ${VENV_DIR}/bin/activate 
                JENKINS_NODE_COOKIE=dontKillMe nohup gunicorn -w 1 -b 0.0.0.0:8089 app:app > ${PROJECT_DIR}/gunicorn.log 2>&1 &
                sleep 2
                echo "Checking if Gunicorn is running..."
                ps aux | grep gunicorn
                sleep 1
                lsof -i:8089
                '''
                echo "Build and Deploy steps completed."
            }
        }
    }

    post {
        always {
            // Clean up
            echo "Post steps completed."
        }
    }
}
